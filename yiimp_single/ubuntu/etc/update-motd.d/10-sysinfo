#!/usr/bin/env bash
#
#    10-sysinfo - generate the system information
#    Copyright (c) 2013 Nick Charlton
#
#    Authors: Nick Charlton <hello@nickcharlton.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# 
##########################################
#                                        # 
# Updated by klaxis for Yiimpool use... #
#                                        #
##########################################

source /etc/yiimpooldonate.conf
source /etc/yiimpool.conf
source /etc/functions.sh

# Define colors
RED=$'\033[00;31m'
GREEN=$'\033[00;32m'
YELLOW=$'\033[00;33m'
CYAN=$'\033[00;36m'
RESET=$'\033[0m'

# Function to check process status
check_process_status() {
    local process_name="$1"
    if ps aux | grep -q "[${process_name:0:1}]${process_name:1}"; then
        echo "${GREEN}running${RESET}"
    else
        echo "${RED}stopped${RESET}"
    fi
}

# Function to display header information
print_header() {
    printf "%-7s %-25s %-16s %-15s\n" "$1" "$2" "$3" "$4"
}

# Function to display a colored message
colored_message() {
    echo "${CYAN}$1${RESET}"
}

# Display current date and time
date=$(date)
echo -e "${YELLOW}Current date and time:${GREEN} $date ${RESET}"
echo

# Display system information
colored_message "System information:"
echo
/usr/bin/landscape-sysinfo
echo

# Pool status
colored_message "Pool Status:"
daemon='/home/crypto-data/wallets'
site='/home/crypto-data/yiimp/site'
echo
print_header "Main:" "$(check_process_status 'main')" \
    "Daemon Directory:" "${YELLOW}$daemon${RESET}"

print_header "Blocks:" "$(check_process_status 'blocks')" \
    "YiiMP Directory:" "${YELLOW}$site${RESET}"

print_header "Loop2:" "$(check_process_status 'loop2')" \
    "Hint:"" ${GREEN}To view a screen type, screen -r main|loop2|blocks|debug${RESET}"

print_header "Debug:" "$(check_process_status 'log/debug.log')" \
    "Hint:"" ${GREEN}To detach from a screen type, ctrl+a+d${RESET}"
echo

# Server screens
colored_message "Server screens:"
echo -e "${YELLOW}To ${GREEN}Start${YELLOW} | ${RED}stop${YELLOW} | ${YELLOW}restart${YELLOW} | a screen use the following command.${RESET}"
echo
echo -e "${YELLOW}screens${GREEN} start ${YELLOW} |${RED} stop ${YELLOW} |${YELLOW} restart ${YELLOW} | main ${YELLOW} |loop2 ${YELLOW} | blocks ${YELLOW} | debug ${RESET}"
echo

# Reload hint
colored_message "To reload this page just type: ${GREEN}motd${RESET}"
echo

# Donation information
colored_message "Donations for continued support of this script are welcomed at:"
echo "---------------------------------------------------------------"
echo -e "BTC: ${CYAN}  $BTCDON${RESET}"
echo -e "DOGE: ${CYAN} $DOGEDON${RESET}"
echo -e "ETH: ${CYAN}  $ETHDON${RESET}"
echo -e "LTC: ${CYAN}  $LTCDON${RESET}"
echo "---------------------------------------------------------------"

# Display pending reboots and package updates
/usr/lib/update-notifier/update-motd-reboot-required
/usr/lib/update-notifier/apt-check --human-readable
echo
